<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[第三章 Java的基本程序设计结构]]></title>
    <url>%2F2018%2F12%2F03%2FJava%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-2018-12-3%2F</url>
    <content type="text"><![CDATA[Java变量声明1. Java变量不分定义和声明,但定义过后必须初始化。 12345678int i;i = 10;System.out.println(i);//正确/*-------------------------*/ int i;System.out.println(i);//错误 2. Java使用final关键字定义常量1final double CM_PER_INCH = 2.54; String 类1. Java的String类 类似与C的char*指针，且String对象不能改变。12345678910String str = "Hello!";str = "Ok!";//Java Codechar* temp = malloc(3);temp = "Ok!";str = temp;//equivalent C Code//因为这个特征，string类不提供insert方法。 2. 检验相等时不能使用 “==”，Java不提供运算符重载。12345//"=="只能检验两个String是否指向同一个位置，内容相同的字符串不一定存储在同一个位置if (str == "Hello!")...;//Maybe false Maybe trueif (str.equals("Hello!")... ;//正确使用 3. 判断空串1234567if(str.length() == 0)//orif(str.equals(""))//有些Stirng对象可能为特殊值null//要先检查是不是null再检查是不是空串，因为null值上调用方法会出错if(str!=null &amp;&amp; str.length!=0)...; 3. 常用API1234567str.compareTo(String other) //即C中的strcmp()str.equals(Object other) //判断str与other是否相等str.indexOf(String substr) //寻找substr在str第一次出现的位置，不存在则返回-1str.length() //返回字符串的长度str.replace(oldstring, newstring)//用newstring替代所有str中的oldstirngstr.trim() //返回一个删掉str头尾空格的Stringstr.substring(beginIndex,(endIndex))//返回str中下标从begin到end的子串 Scanner 类1. Scanner在 java.util 包中 多用于输入，其用法为12345678910import java.util.Scanner;public class Main&#123; public static void main(String args[]) &#123; Scanner in = new Scanner(System.in); in.nextLine(); .... &#125;&#125; 2. 常用API1234567in.nextLine() //读取下一行输入in.next() //读取下一个单词，空格作为分隔符in.nextInt()in.nextDouble()//读取下一个整型或浮点型字符序列in.hasNext()in.hasNextInt()in.hasNextDouble() //检验是否还有下一个单词/整数/浮点数 数组1. 声明1234int[] a;//只是声明，没有初始化。int[] a = new int[100];//初始化，下标从0-99，数字数组初始化为0，对象数组初始化为nullint a[];//也可以这么声明，但是习惯上用上面那种。 2. for each循环12345678for(int element: a) System.out.println(element)//类似python//然而打印字符内容有更简单的方法System.out.println(Arrays.toString(a))//java.util.Arrays//转化成的字符串为[1,2,3,4,..] 3. 初始化12int[] smallPrimes = &#123;2,3,5,7,11,13&#125;; //不用调用newSmallPrims = new int[]&#123;2,3,5,7,11,13&#125;; //注，这里是利用匿名数组重新初始化 4. 数组拷贝123456//变量引用同一个数组int[] arr = smallPrimes;//值拷贝int[] arr = Arrays.copyOf(smallPrime,smallPrime.length);//也可以用于增长数组大小,多余的元素会被赋值为0，如果长度更小，只复制前面的元素smallPrime = Arrays.copyOf(smallPrime,2 * smallPrime.length); 5. 常用API1234567Arrays.toString(type[] a) //上面介绍了Arrays.copyOf(type[] a,int length)Arrays.copyOfRange(type[] a,int start,int end) //返回长度为end - start的a的子数组，[start,end),若end &gt; length则返回0Arrays.binarySearch(type[] a, type v)Arrays.binarySearch(type[] a,int start, int end,type v)//二分查找 ( [start,end) ) 找到了返回下标，否则返回负数r,(-r-1)为保持a有序的V插入点Arrays.fill(a,v) //将数组所有值置为v 6. 多维数组1234567891011121314151617double[][] arr = new [...][...];//也可以int[][] magicSquare =&#123; &#123;16,3,2,13&#125;, &#123;5,10,11,8&#125;, &#123;9,6,7,12&#125;, &#123;4,15,14,1&#125;&#125;;//for eachfor (double[] row:arr) for(double value:row) do something with value...//快速打印[[...],[...],[...,],...]System.out.println(Arrays.deepToString(arr)); 7. 不规则数组12345678//不同于C/C++ Java支持不规则数组，即每一行的长度可以不同int[][] odds = new int[NMAX+1][];for (int n = 0; n &lt;=NMAX; n++;) odds[n] = new int[n+1]//odds[0] = 0//odds[1] = 0 0//odds[2] = 0 0 0//......]]></content>
      <categories>
        <category>Java 核心技术 卷Ⅰ</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A + B problem by Java]]></title>
    <url>%2F2018%2F11%2F10%2FA%2BB_Problem%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142import java.io.BufferedInputStream;import java.util.Scanner;public class Main&#123; private static Scanner in =new Scanner(new BufferedInputStream(System.in)); public static void main(String args[]) &#123; while (in.hasNext()) &#123; System.out.println(in.nextInt()+in.nextInt()); &#125; &#125;&#125;/*1. 格式1.1 不要带上package name！1.2 class name 一定要是Main2. 输入2.1 scanner输入肯定是new一个Scanner类，但是会有两种方式： Scanner sc = new Scanner (System.in); Scanner sc = new Scanner (new BufferedInputStream(System.in));//数据量大的情况下此种方式快2.2 终止条件万金油:while(sc .hasNext())矫情一点：sc .hasNextInt()或sc .hasNextDouble()或sc .hasNextLine()2.3 读值int: int n = sc.nextInt();double: double t = sc.nextDouble();string space split(空格分割): String s = sc.next();string enter split(换行分割): String s = sc.nextLine();3. 输出和C中的printf保持一致: System.out.printf("%s %d %fn",arg1,arg2,arg3);自带换行 System.out.println(arg1);*/]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>ACM</tag>
      </tags>
  </entry>
</search>
